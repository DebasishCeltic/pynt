{
	"info": {
		"_postman_id": "40b86d06-2067-4d4b-b076-5324fc3c1249",
		"name": "Pynt For Windows",
		"description": "![](https://content.pstmn.io/d0c83d75-48de-408f-b4bf-ded39fdccc26/cHludC1sb2dvLnBuZw==)\n\n# **Description:**\n\n**Pynt** is an API security solution which generates automated security tests based on your existing functional test collection.\n\nPynt dynamic security test covers the OWASP-10 top API categories and retrieves the results in few minutes.\n\n# **Prerequisites:**\n\n1.  Ensure **Docker desktop** is available and running on your machine (install Docker from  \n    [https://www.docker.com/products/docker-desktop/](https://www.docker.com/products/docker-desktop/)).\n2.  Enable The '**Expose daemon on tcp://localhost:2375 without TLS'** option in the General section of your Docker desktop settings.\n3.  Ensure your functional test collection is available in your workspace.\n4.  If your functional tests requires environment variables, make sure they are set.\n5.  Make sure your target is up.\n    \n\n# **Important Notes:**\n\n1.  Please verify the above by running your functional test collection vs. your target before executing the Pynt security test.\n2.  Pynt utilizes your functional tests to inform the security tests. The more extensive the functional tests are, the more the security tests will cover. For example, more APIs, more users, more requests and full use of the parameters will trigger broader and richer dynamic security tests.\n    \n\n# **How to Run:**\n\n1.  Click on the '**Variables**' tab of the '**Pynt for Windows**' collection and fill the values of required parameters:\n    1.  `API-KEY` - your postman API key - If you previously saved and have your API key, enter it here under the 'Current Value' tab. If not, enter [https://postman.co/settings/me/api-keys](https://postman.co/settings/me/api-keys) to generate or regenarete your API key as it can be copied only when created for security reasons. You won't need to modify this parameter till your API-key will expire.\n    2.  `COLLECTION-NAME` - your functional test collection name, e.g. 'Test Collection 1'. Pynt will refer to this collection to generate the automated security tests.\n    3.  `port` - Pynt will use this port. Change to other than 5001 if this port already in use.\n2.  Run the '**Pynt for Windows**' collection. A new forked collection of your chosen collection will be created with the label of `API-Security.`\n3.  Run the new security collection to get the security results!\n4.  In case you modified your functional test collection or you wish to refer to another test collection, go back to step 1b.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20945803"
	},
	"item": [
		{
			"name": "Setup",
			"item": [
				{
					"name": "Is Docker Up?",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const port = pm.variables.get(\"port\")\r",
									"pm.sendRequest({url: `http://127.0.0.1:${port}/api/scan_status`}, (error, response) => {\r",
									"    console.log(error)\r",
									"    if(error == null && (response.code == 202 || response.code == 200)) {\r",
									"        postman.setNextRequest(\"setup_pynt\");\r",
									"        return\r",
									"    }\r",
									"    postman.setNextRequest(\"Create Pynt Docker\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://pynt.io",
							"protocol": "https",
							"host": [
								"pynt",
								"io"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Pynt Docker",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"imageName\", \"ghcr.io/pynt-io/pynt:postman-latest\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(pm.variables.get(\"imageName\"))",
									"",
									"function pullImage(imageName) {",
									"    console.log(\"Inside pull image\")",
									"    splited = imageName.split(\":\")",
									"    return {",
									"        method: 'POST',",
									"        url: `http://127.0.0.1:2375/v1.41/images/create?fromImage=${splited[0]}&tag=${splited[1]}`,",
									"    }",
									"}",
									"",
									"if (pm.response.code == 404) {",
									"    var r = pm.variables.get(\"running\")",
									"    console.log(r)",
									"    if (r) {",
									"        pm.test(\"\", () => {throw new (\"Could not find the collection, please refer to documentation\")})",
									"        return",
									"    }",
									"    pm.sendRequest(pullImage(pm.variables.get(\"imageName\")), (err, response) => {",
									"        if (err) {",
									"            pm.test(\"\",() => { throw new(\"Error in pulling image: \", err)})",
									"        }",
									"        pm.variables.set(\"running\", true) ",
									"        postman.setNextRequest(pm.info.requestId)",
									"    })",
									"} else if (pm.response.code == 201) {",
									"    id = pm.response.json()[\"Id\"]",
									"    console.log(`docker id will be: ${id}`)",
									"    pm.variables.set(\"dockerId\", id)",
									"} else {",
									"    console.log(pm.response.text())",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Image\": \"{{imageName}}\",\n    \"HostConfig\": {\n        \"PortBindings\":{\n            \"{{port}}/tcp\": [\n                {\n                    \"HostPort\": \"{{port}}\"\n                }\n            ]\n        }\n    },\n    \"ExposedPorts\": {\n        \"{{port}}/tcp\": {}\n    },\n    \"Cmd\": [\"--port\", \"{{port}}\"]\n}"
						},
						"url": {
							"raw": "http://127.0.0.1:2375/v1.41/containers/create",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "2375",
							"path": [
								"v1.41",
								"containers",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resp = pm.response",
									"",
									"if (resp.code == 404 || resp.code == 500) {",
									"    pm.test(\"\", () => {throw new (\"Could not run the pynt docker, please refer to documentation in order to run the docker\")})",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:2375/v1.41/containers/{{dockerId}}/start",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "2375",
							"path": [
								"v1.41",
								"containers",
								"{{dockerId}}",
								"start"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "setup_pynt",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"setTimeout(function(){},[2000])"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"API-KEY\": \"{{API-KEY}}\",\n  \"collection-to-test\": \"{{COLLECTION-NAME}}\",\n  \"os-platform\": \"win\",\n  \"reporter-name\": \"{{REPORTER-NAME}}\"\n}"
				},
				"url": {
					"raw": "http://127.0.0.1:5001/api/setup",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5001",
					"path": [
						"api",
						"setup"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "API-KEY",
			"value": "<Your Postman's API key>",
			"type": "string"
		},
		{
			"key": "COLLECTION-NAME",
			"value": "<Your functional test collection>",
			"type": "string"
		},
		{
			"key": "port",
			"value": "5001",
			"type": "string"
		},
		{
			"key": "REPORTER-NAME",
			"value": "",
			"type": "string"
		}
	]
}